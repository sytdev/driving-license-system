services:
  ########### INFRA CONTAINERS(DATABASE,PROMETHEUS,GRAFANA,ZOOKEEPER,KAFKA,KEYCLOAK,ZIPKIN) ###########
  cmd-database:
    image: postgres:16.4
    #ports:
    #  - 5532:5432
    expose:
      - 5432
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
        - ./1-init-postgres.sql:/docker-entrypoint-initdb.d/1-init-postgres.sql
        - ./2-data-postgres.sql:/docker-entrypoint-initdb.d/2-data-postgres.sql
        - postgres-data:/var/lib/postgresql/data
    networks:
      backend:
        aliases:
          - "cmd-database"
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  query-database:
    image: mongo:6.0.17
    #ports:
    #  - 27117:27017
    expose:
      - 27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    volumes:
      - ./1-init-mongo.js:/docker-entrypoint-initdb.d/1-init-mongo.js #BIND VOLUME
      - mongodb-data:/data/db/
      - mongodb-log:/var/log/mongodb
    networks:
      backend:
        aliases:
          - "query-database"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.54.0
    container_name: prometheus
#    ports:
#      - 9090:9090
    expose:
      - 9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      backend:
        aliases:
          - "prometheus"

  grafana:
    image: grafana/grafana-oss:11.0.4
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_USER=user
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    networks:
      backend:
        aliases:
          - "grafana"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.0
    hostname: zookeeper
    container_name: zookeeper
    #ports:
    #  - 2181:2181
    expose:
      - 2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      backend:
        aliases:
          - "zookeeper"

  kafka:
    image: confluentinc/cp-kafka:7.7.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    #ports:  #ports to be accessed by external clients(ex. from local machine)
    #  - 9092:9092
    #  - 29092:29092
    expose:
      - 19092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # PLAINTEXT://kafka:19092 -> internal port to be accessed by clients inside the same docker network
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:19092,CONNECTIONS_FROM_HOST://localhost:9092,IP_HOST://192.168.1.37:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONNECTIONS_FROM_HOST:PLAINTEXT,IP_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      backend:
        aliases:
          - "kafka"

  zipkin:
    image: ghcr.io/openzipkin/zipkin-slim
    environment:
      - STORAGE_TYPE=mem
    ports:
      - 9411:9411
    networks:
      backend:
        aliases:
          - "zipkin"

  keycloak:
    image: quay.io/keycloak/keycloak:19.0
    command: start-dev --import-realm #dev mode(embedded h2 database-not recomended)
    environment:
      KEYCLOAK_ADMIN: user
      KEYCLOAK_ADMIN_PASSWORD: password
      KC_HOSTNAME_DEBUG: true
      KC_HOSTNAME_URL: "http://keycloak:8080"
      KC_HOSTNAME_ADMIN_URL: "http://localhost:8080"
      KC_HOSTNAME_STRICT_HTTPS: false
    volumes:
      - ./licesys-realm.json:/opt/keycloak/data/import/licesys-realm.json
    ports:
      - 8080:8080
    networks:
      backend:
        aliases:
          - "keycloak"

  ########### APPLICATION CONTAINERS(LICENSE SYSTEM) ###########
  configserver:
    image: licesys/config-server:0.0.1-SNAPSHOT
    #ports:
    #   - "8071:8071"
    expose:
      - 8071
    environment:
      ENCRYPT_KEY: $$L1c3NS3cr3t#
      SERVER_PORT: 8071
    networks:
      backend:
        aliases:
          - "configserver"

  eurekaserver:
    image: licesys/eureka-server:0.0.1-SNAPSHOT
    ports:
      - "8070:8070"
    environment:
      SERVER_PORT: 8070
      CONFIGSERVER_URI: "http://configserver:8071"
    depends_on:
      cmd-database:
        condition: service_healthy
      query-database:
        condition: service_healthy
      configserver:
        condition: service_started  
    networks:
      backend:
        aliases:
          - "eurekaserver"

  eventservice:
    image: licesys/event-service:0.0.1-SNAPSHOT
    #ports:
    #  - "8074:8074"
    expose:
      - 8074
    environment:
      ENV_PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8071"
      EUREKASERVER_URI: "http://eurekaserver:8070/eureka/"
      MONGO_DBSERVER_HOST: "query-database"
      MONGO_DBSERVER_PORT: 27017
      SERVER_PORT: 8074
      KAFKABOOT_SERVER: "kafka:19092"
    depends_on:
      kafka:
        condition: service_started
      query-database:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "eventservice"

  licensecmdservice:
    image: licesys/license-command-service:0.0.1-SNAPSHOT
    #ports:
    #  - "8073:8073"
    expose:
      - 8073
    environment:
      ENV_PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8071"
      EUREKASERVER_URI: "http://eurekaserver:8070/eureka/"
      DBSERVER_URI: "cmd-database:5432"
      SERVER_PORT: 8073
      KAFKABOOT_SERVER: "kafka:19092"
      ZIPKINSERVER_URI: "http://zipkin:9411/api/v2/spans"
    depends_on:
      cmd-database:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
      eventservice:
        condition: service_started
    networks:
      backend:
        aliases:
          - "licensecmdservice"

  licensequeryservice:
    image: licesys/license-query-service:0.0.1-SNAPSHOT
    #ports:
    #  - "8075:8075"
    expose:
      - 8075
    environment:
      ENV_PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8071"
      EUREKASERVER_URI: "http://eurekaserver:8070/eureka/"
      MONGO_DBSERVER_HOST: "query-database"
      MONGO_DBSERVER_PORT: 27017
      SERVER_PORT: 8075
      ZIPKINSERVER_URI: "http://zipkin:9411/api/v2/spans"
    depends_on:
      query-database:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "licensequeryservice"

  gatewayserver:
    image: licesys/gateway-server:0.0.1-SNAPSHOT
    ports:
      - "8072:8072"
    environment:
      SERVER_PORT: 8072
      CONFIGSERVER_URI: "http://configserver:8071"
      EUREKASERVER_URI: "http://eurekaserver:8070/eureka/"
      KEYCLOAKREALMSERVER_URI: "http://keycloak:8080/realms"
      ZIPKINSERVER_URI: "http://zipkin:9411/api/v2/spans"
    depends_on:
      keycloak:
        condition: service_started
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
      licensecmdservice:
        condition: service_started
      licensequeryservice:
        condition: service_started
    networks:
      backend:
        aliases:
          - "gatewayserver"

#NAMED VOLUMES (the default driver storage is 'local')
volumes:
  postgres-data:
  mongodb-data:
  mongodb-log:
  prometheus-data:

networks:
  backend:
    driver: bridge